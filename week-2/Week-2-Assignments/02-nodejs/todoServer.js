/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const port = 3000;

app.use(bodyParser.json());

 let todos = [];
 let ids = [];

function generateUniqueId() {
  const alphanumeric = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  const idLength = 8;

  let randomId = '';
  for (let i = 0; i < idLength; i++) {
    const randomIndex = Math.floor(Math.random() * alphanumeric.length);
    randomId += alphanumeric[randomIndex];
  }

  return randomId;
}

function add(todoObj) {
  const id = generateUniqueId();
  todos.push(todoObj);
  ids.push(id);
}

// 1. GET / todos
app.get('/todos', (req, res) => {
  res.send(todos);
  console.log(ids);
});

// 2. GET /todos/:id
app.get('/todos/:id', (req, res) => {
  var currentId = req.params.id;
  var found = false;
  for(let i=0; i<ids.length; i++) {
    if(currentId === ids[i]) {
      res.send({ id: currentId, ...todos[i] });
      found = true;
      break;
    }
  }
  if (!found) {
    res.status(404).send("Error 404 Not Found!");
  }
});

// 3. POST /todos
app.post('/todos', (req, res) => {
  let newTodo = req.body;
  add(newTodo);
  res.status(201).send({ id: ids[ids.length - 1] });
});

// 4. PUT /todos/:id
app.put('/todos/:ids', (req, res) => {
  var currentId = req.params.ids;
  var updatedBody = req.body;
  var found = false;
  for(let i=0; i<ids.length; i++) {
    if(currentId == ids[i]) {
      todos[i] = updatedBody;
      res.status(200).send(updatedBody);
      found = true;
      break;
    }
  }
  if (!found) {
    res.status(404).send("Error 404 Not Found!");
  }
});

// 5. DELETE /todos/:id
app.delete('/todos/:ids', (req, res) => {
  var currentId = req.params.ids;
  var found = false;
  for(let i=0; i<ids.length; i++) {
    if(currentId == ids[i]) {
      todos.splice(i, 1);
      res.send("Todo Deleted!");
      found = true;
      break;
    }
  }
  if (!found) {
    res.status(404).send("Error 404 Not Found!");
  }
});

module.exports = app;
